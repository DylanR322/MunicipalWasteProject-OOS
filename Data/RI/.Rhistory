if (!is.numeric(value)) return()
normalized <- (value - -0.3) / (0.3 - -0.3) # this 7 - 7 scale mutes the colors better than -5 to 5, and is more even than the min max scale of -3.9 to 4.9
color <- GrnWhiRedN(normalized)
list(background = color)
}, format = colFormat(digits = 2), name = "Effect on Waste Per Household (Tons/year)"),
effectwphppd = colDef(style = function(value) {
if (!is.numeric(value)) return()
normalized <- (value - -1.5) / (1.5 - -1.5) # this 7 - 7 scale mutes the colors better than -5 to 5, and is more even than the min max scale of -3.9 to 4.9
color <- GrnWhiRedN(normalized)
list(background = color)
}, format = colFormat(digits = 2), name = "Effect on Waste Per Household (Lbs per Household/day)")),
compact = TRUE, pagination = FALSE, bordered = TRUE)
reactable(regtbl,
columns = list(
baseline = colDef(name = "Baseline Policy"),
change = colDef(name = "Change"),
effectdiv = colDef(name = "Effect on Diversion Rate (in %-Points)"),
effectwpht = colDef(name = "Effect on Diversion Rate (in %-Points)"),
effectwphppd = colDef(name = "Effect on Diversion Rate (in %-Points)")),
compact = TRUE, pagination = FALSE, bordered = TRUE)
#I'll export this table to put it in the report by hitting export on the viewer
## Summary Statistics
# municipalities in each state in the dataset
statefreq <- cbind.data.frame(table(data$State))
total <- sum(statefreq$Freq)
statefreq[5, 2] <- total
statefreq$Var1 <- as.character(statefreq$Var1)
statefreq$Var1[5] <- "Total"
reactable(statefreq,
columns = list(
Var1 = colDef(name = "State"),
Freq = colDef(name = "Frequency")), compact = TRUE, bordered = TRUE, pagination = FALSE)
# For each variable, the number with data
NforVars <- c(sum(table(data$ProvideCompostBins)), sum(table(data$FoodService)), sum(table(data$RecyclingEnforcePersonnel)),
sum(table(data$TrashServiceType)), sum(table(data$RateType)), sum(table(data$ProvRecycleBinorCart)),
sum(table(data$SwapShop)), sum(table(data$EnforceRecycling)), sum(table(data$divrate)), sum(table(datanofl$wasteperhh)))
VarsNames <- c("Provide Compost Bins?", "Provide Food Waste Management?", "Have Recycling Enforecment Personnel?",
"Trash Service type offered?", "Type of Fees?", "Provide Recycle Bins or Carts?",
"Have a swap shop?", "Have a Mandatory Recycling Ordinance?", "Diversion Rate", "Waste per Household")
Varstbl <- cbind.data.frame(VarsNames, NforVars)
reactable(Varstbl,
columns = list(
VarsNames = colDef(name = "Variable/Question"),
NforVars = colDef(name = "Number of Municipalities with Data")), compact = TRUE, bordered = TRUE, pagination = FALSE)
# Descriptive statistics of the important variables
descstats <- c(summary(data$divrate)[1:6], summary(data$PctBachelororMore)[1:6], summary(datanofl$wasteperhh[1:6]),
summary(datanofl$wasteperhhppd[1:6]))
varnames <- c("Diversion Rate", "Educational Attainment", "Waste Per HouseholdT", "Wphaf")
test <- rbind.data.frame(summary(data$divrate))
data$id <- str_c(data$State, "---", data$GovUnit)
datanofl$id <- str_c(datanofl$State, "---", datanofl$GovUnit)
continvars1 <- data[, c(40, 43, 48)]
continvars2 <- datanofl[, c(44, 47, 48)]
continvars <- merge(continvars1, continvars2, by = "id")
stargazer(continvars, type = "text", summary.stat = c("n", "mean", "median", "p25", "p75", "sd", "min", "max"))
stargazer(continvars, type='html', summary.stat = c("mean", "median", "p25", "p75", "sd", "min", "max"),
title='Descriptive Statistics for Significant Dependent & Independent Variables', align = TRUE,
covariate.labels = c("Percent with a Bachelor's Degree or Higher",
"Diversion Rate",
"Waste per Household (Tons/Year)",
"Waste per Household (Lbs/Day)"), digits = 1, out = "descstats.html")
Rates <- cbind.data.frame(table(data$RateType))
Rates[, 1] <- c("Flat Fee Only", "Flat Fee & Usage-Based Fee", "Usage-Based Fee Only")
reactable(Rates,
columns = list(
Var1 = colDef(name = "Fee Type"),
Freq = colDef(name = "Number of Municipalities")), compact = TRUE, bordered = TRUE, pagination = FALSE)
### Appendix --------------------
# All the Following are exported using the Export button on the viewer
par(mfrow = c(2,2))
plot(divfull)
plot(wphfull)
vifdiv <- vif(divfull)
reactable(cbind.data.frame(vifdiv),
columns = list(
vifdiv = colDef(name = "Variance Inflation Factor", format = colFormat(digits = 2))),
compact = TRUE, pagination = FALSE, bordered = TRUE)
# the above applies to both since it is the same variables
# This is simply reported in the text
bptest(divfull) # fails
bptest(wphfull) # passes
# Educational Attainment Graph
educanddiv <- data %>% ggplot(aes(x = PctBachelororMore, y = divrate)) + geom_point(pch = 1, alpha = 0.8) +
ggtitle("Diversion Rate & Educational Attainment") +
xlab("% of Population with a Bachelor's Degree or Higher") + ylab("Diversion Rate") +
geom_vline(xintercept = 26.8, linetype = "dashed") +
geom_vline(xintercept =  64.5, linetype = "dashed") +
scale_y_continuous(labels = function(x) paste0(x, "%")) + scale_x_continuous(labels = function(x) paste0(x, "%")) +
theme_bw() + theme(legend.position = 'none') + gghighlight(divrate > 50) +
annotate(geom = "text",
label = c("Median Educational \n Attainment", "Very High Educational \n Attainment"), x = c(18, 55), y = c(70, 72.5), angle = 30, vjust = 1, size = 3)
educanddiv
#### OOS Waste Data Project
## Analysis
## Dylan Radley
library(rio)
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(pdftools)
library(lmtest)
library(car)
library(stargazer)
library(gridExtra)
library(reactable)
library(RColorBrewer)
library(gghighlight)
rm(list = ls())
options(scipen = 50) #prevent scientific notation
`%notin%` <- Negate(`%in%`)
setwd("~/Desktop/Trash Data Project OOS/Files/")
### Creating Variables --------------------
data <- import("dta.csv")
data <- data[, -1] # remove V1
divertedcols <- c(5, 6, 9) # I will NOT count Yard Waste if it is not categorized because it is often not
data$DivertedWaste <- apply(data[, divertedcols], 1, function(x) sum (x, na.rm = TRUE))
data$DivertedWaste[is.na(data$RecyclingTons) & is.na(data$FoodWaste) & is.na(data$DivertedYardWaste)] <- NA
disposedcols <- c(4, 7)
data$DisposedWaste <- apply(data[, disposedcols], 1, function(x) sum (x, na.rm = TRUE))
data$DisposedWaste[data$DisposedWaste == 0] <- NA # if they show having NO trash, then like, they aren't collecting
data$divrate <- data$DivertedWaste / (data$DisposedWaste + data$DivertedWaste)
data$divrate[is.na(data$RecyclingTons) | is.na(data$SolidWasteTons)] <- NA # means there will not be enough data to
# collect this, will likely only use the yard waste.
data$divrate <- data$divrate*100 # convert to percent for ease of interpretation
data$wasteperhh <- data$DisposedWaste / data$HHServedTrash
data$wasteperhh[data$HHServedTrash == 0] <- NA
data$wasteperhh[is.na(data$SolidWasteTons)] <- NA # Again, will not be enough data then
# Get rid of Tip Fees because they are not paid by people
data <- data[, -30]
data$RateType <- NA
data$RateType[data$TransferStationAccessFee == 1 | data$`Per-VisitFee` == 1 |
data$`PAYT/SMART` == 1] <- 1
data$RateType[data$AnnualFee == 1 | data$PropertyTax == 1 | data$PerHouseCharge == 1 | data$DropoffFee == 1 |
data$CurbsideFee == 1] <- -1
data$RateType[(data$TransferStationAccessFee == 1 | data$`Per-VisitFee` == 1 | data$`PAYT/SMART` == 1) &
(data$AnnualFee == 1 | data$PropertyTax == 1 | data$DropoffFee == 1 | data$CurbsideFee == 1 |
data$PerHouseCharge == 1)] <- 0
# Now to ID and limit egregious outliers
summary(data$divrate)
quartilesdiv <- quantile(data$divrate, probs = c(0.25, 0.75), na.rm = TRUE)
iqrdiv <- IQR(data$divrate, na.rm = TRUE)
upper <- quartilesdiv[2] + 1.5*iqrdiv
extupper <- quartilesdiv[2] + 3*iqrdiv
lower <- quartilesdiv[1] - 1.5*iqrdiv
outliersdiv <- data[(data$divrate > upper | data$divrate == 0) & !is.na(data$divrate), ]
# Remove the  towns with diversion above 95% because they are extreme outliers, remove Rutherfordton and pilot mountain
# b/c unusual amount of Yard Waste. Removing Spencer Mountain because it is empty
data <- data[data$GovUnit != "Williamstown" & data$GovUnit != "Adams" & data$GovUnit != "East Longmeadow" &
data$GovUnit != "RUTHERFORDTON" & data$GovUnit != "PILOT MOUNTAIN" & data$GovUnit != "SPENCER MOUNTAIN", ]
summary(data$wasteperhh)
quartileswph <- quantile(data$wasteperhh, probs = c(0.25, 0.75), na.rm = TRUE)
iqrwph <- IQR(data$wasteperhh, na.rm = TRUE)
upperwph <- quartileswph[2] + 1.5*iqrwph
extupperwph <- quartileswph[2] + 3*iqrwph
lowerwph <- quartileswph[1] - 1.5*iqrwph
outlierswph <- data[(data$wasteperhh > upperwph | data$wasteperhh < lowerwph) & !is.na(data$wasteperhh), ]
# Create a separate dataset without FL data for the wasteperhh; it contains so, so many outliers.
datanofl <- data[data$State != "FL", ]
quartileswph <- quantile(datanofl$wasteperhh, probs = c(0.25, 0.75), na.rm = TRUE)
iqrwph <- IQR(datanofl$wasteperhh, na.rm = TRUE)
upperwph <- quartileswph[2] + 1.5*iqrwph
extupperwph <- quartileswph[2] + 3*iqrwph
lowerwph <- quartileswph[1] - 1.5*iqrwph
outlierswph <- datanofl[(datanofl$wasteperhh > upperwph | datanofl$wasteperhh < lowerwph) & !is.na(datanofl$wasteperhh), ]
# Remove Robbins, which still seems to be a significant outlier, as well as Pembroke and Manteo which are also outliers
datanofl <- datanofl[datanofl$GovUnit != "ROBBINS" & datanofl$GovUnit != "PEMBROKE" &
datanofl$GovUnit !=  "MANTEO", ]
# Nags head, all have much larger hhserved than hh, which is a significant discrepancy for this calculation
datanofl$wasteperhh[datanofl$GovUnit == "NAGS HEAD"] <- NA
datanofl$wasteperhh[datanofl$GovUnit == "OAK ISLAND"] <- NA
### Fitting Models --------------------
fulltest <- lm(divrate ~ TrashServiceType + RecyclingServiceType + FoodService + ProvRecycleBinorCart +
EnforceRecycling + ProvideCompostBins + RecyclingEnforcePersonnel + SwapShop + RateType + PopulationDensity +
MedIncome + PctBachelororMore, data)
summary(fulltest)
vif(fulltest)
cor(data[, c(14, 15, 17, 19, 20, 21, 22, 24, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
# Will Remove Trash or Recycling Service Type, which are HIGHLY correlated with each other. Remove Recycling because
# it has less observations
fulltest2 <- lm(divrate ~ TrashServiceType + FoodService + ProvRecycleBinorCart + EnforceRecycling + ProvideCompostBins +
RecyclingEnforcePersonnel + SwapShop + RateType + PopulationDensity + MedIncome + PctBachelororMore, data)
summary(fulltest2)
vif(fulltest2)
cor(data[, c(14, 17, 19, 20, 21, 22, 24, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
sum(table(data$divrate))
sum(table(data$TrashServiceType))
sum(table(data$FoodService))
sum(table(data$ProvRecycleBinorCart))
sum(table(data$EnforceRecycling))
sum(table(data$ProvideCompostBins))
sum(table(data$RecyclingEnforcePersonnel))
sum(table(data$SwapShop))
sum(table(data$RateType))
completetest <- lm(divrate ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + log(PopulationDensity) + MedIncome + PctBachelororMore, data)
summary(completetest)
vif(completetest)
cor(data[, c(14, 17, 20, 22, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
plot(completetest)
bptest(completetest)
# Now to look at the test for waste per household
fulltestwph <- lm(wasteperhh ~ TrashServiceType + RecyclingServiceType + FoodService + ProvRecycleBinorCart +
EnforceRecycling + ProvideCompostBins + RecyclingEnforcePersonnel + SwapShop + RateType + PopulationDensity +
MedIncome + PctBachelororMore, datanofl)
summary(fulltestwph)
vif(fulltestwph)
cor(datanofl[, c(14, 15, 17, 19, 20, 21, 22, 24, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
# Will Remove Trash or Recycling Service Type, which are HIGHLY correlated with each other. Remove Recycling because
# it has less observations
fulltestwph2 <- lm(wasteperhh ~ TrashServiceType + FoodService + ProvRecycleBinorCart + EnforceRecycling + ProvideCompostBins +
RecyclingEnforcePersonnel + SwapShop + RateType + PopulationDensity + MedIncome + PctBachelororMore, datanofl)
summary(fulltestwph2)
vif(fulltestwph2)
cor(datanofl[, c(14, 17, 19, 20, 21, 22, 24, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
sum(table(datanofl$wasteperhh))
sum(table(datanofl$TrashServiceType))
sum(table(datanofl$FoodService))
sum(table(datanofl$ProvRecycleBinorCart))
sum(table(datanofl$EnforceRecycling))
sum(table(datanofl$ProvideCompostBins))
sum(table(datanofl$RecyclingEnforcePersonnel))
sum(table(datanofl$SwapShop))
sum(table(datanofl$RateType))
completewph <- lm(wasteperhh ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + PopulationDensity + MedIncome + PctBachelororMore, datanofl)
summary(completewph)
vif(completewph)
cor(datanofl[, c(14, 17, 20, 22, 34, 35, 40, 45 )], method = "pearson", use = "complete.obs")
plot(completewph)
bptest(completewph) # passes
# now to take some looks at the variables that did not make it, namely providing a bin or cart, enforcing recycling, and
# swapshops
provcartdiv <- lm(divrate ~ ProvRecycleBinorCart + PopulationDensity + MedIncome + PctBachelororMore, data)
summary(provcartdiv)
plot(provcartdiv)
vif(provcartdiv)
bptest(provcartdiv) # homo
enforcediv <- lm(divrate ~ EnforceRecycling + PopulationDensity + MedIncome + PctBachelororMore, data)
summary(enforcediv)
plot(enforcediv)
vif(enforcediv)
bptest(enforcediv) # hetero
swapdiv <- lm(divrate ~ SwapShop + PopulationDensity + MedIncome + PctBachelororMore, data)
summary(swapdiv)
plot(swapdiv)
vif(swapdiv)
bptest(swapdiv) # homo
provcartwph <- lm(wasteperhh ~ ProvRecycleBinorCart + PopulationDensity + MedIncome + PctBachelororMore, datanofl)
summary(provcartwph)
plot(provcartwph)
vif(provcartwph)
bptest(provcartwph) # homo
enforcewph <- lm(wasteperhh ~ EnforceRecycling + PopulationDensity + MedIncome + PctBachelororMore, datanofl)
summary(enforcewph)
plot(enforcewph)
vif(enforcewph)
bptest(enforcewph) # homo
swapwph <- lm(wasteperhh ~ SwapShop + PopulationDensity + MedIncome + PctBachelororMore, datanofl)
summary(swapwph)
plot(swapwph)
vif(swapwph)
bptest(swapwph) # homo
### Analysis --------------------
setwd("~/Desktop/Trash Data Project OOS/Files/") # ensure it outputs to the right place
# NOTE: Do effect sizes, and also log pop density and make median income by 10k
# change median income to be by 10k changes
data$MedIncome10k <- data$MedIncome / 10000
# diversion rate
divfull <- lm(divrate ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + log(PopulationDensity) + MedIncome10k + PctBachelororMore, data)
summary(divfull)
divfulleffects <- lm(scale(divrate) ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + log(PopulationDensity) + MedIncome10k + PctBachelororMore, data)
summary(divfulleffects)
stargazer(divfull, divfulleffects, type = "html",
dep.var.labels = c("Diversion Rate", "Effect Sizes"),
covariate.labels = c("Trash Pickup: Curbside, Both, or Dropoff", "Offer Composting", "Provide Compost Bins",
"Recycling Enforcement Personnel", "Fees Based on Usage", "Population Density (logged)",
"Median Household Income (10k)", "% Bachelor's Degree or Higher"),
out = "divfull.html", report = ('vc*p'))
# waste per household
datanofl$MedIncome10k <- datanofl$MedIncome / 10000
wphfull <- lm(wasteperhh ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + log(PopulationDensity) + MedIncome10k + PctBachelororMore, datanofl)
summary(wphfull)
wphfulleffects <- lm(scale(wasteperhh) ~ TrashServiceType + FoodService + ProvideCompostBins + RecyclingEnforcePersonnel +
RateType + log(PopulationDensity) + MedIncome10k + PctBachelororMore, datanofl)
summary(wphfulleffects)
stargazer(wphfull, wphfulleffects, type = "html",
dep.var.labels = c("Waste Per Household", "Effect Sizes"),
covariate.labels = c("Trash Pickup: Curbside, Both, or Dropoff", "Offer Composting", "Provide Compost Bins",
"Recycling Enforcement Personnel", "Fees Based on Usage", "Population Density (logged)",
"Median Household Income (10k)", "% Bachelor's Degree or Higher"),
out = "wphfull.html", report = ('vc*p'))
# Also make a variable of pounds per person per day
data$wasteperhhppd <- data$wasteperhh * 2000 / 365
datanofl$wasteperhhppd <- datanofl$wasteperhh * 2000 / 365
# just the controls
controlsdiv <- lm(divrate ~ log(PopulationDensity) + MedIncome10k + PctBachelororMore, data)
summary(controlsdiv)
controlswph <- lm(wasteperhh ~ log(PopulationDensity) + MedIncome10k + PctBachelororMore, data)
summary(controlswph)
### Figures --------------------
# First, the table that summarizes the regression results for diversion rate
baseline <- c("Fees: Both", "Fees: Both",
"Current % w/ a Bachelor's Degree or higher")
change <- c("Flat Fee Only", "PAYT or Access Fees Only", "10%-point Increase")
effectdiv <- c(-5.3, 5.3, 3)
effectwpht <- c(0.13, -0.13, -0.06)
effectwphppd <- effectwpht * 2000 / 365
regtbl <- cbind.data.frame(baseline, change, effectdiv, effectwpht, effectwphppd)
# now to make a color scale! (nvm just is not pretty)
GrnWhiRedP <- function(x) rgb(colorRamp(c("#fc032c", "#ffffff", "#42f548"))(x), maxColorValue = 255)
GrnWhiRedN <- function(x) rgb(colorRamp(c("#42f548", "#ffffff", "#fc032c"))(x), maxColorValue = 255)
# now to make the actual table
reactable(regtbl,
columns = list(
baseline = colDef(name = "Baseline Policy"),
change = colDef(name = "Change"),
effectdiv = colDef(style = function(value) {
if (!is.numeric(value)) return()
normalized <- (value - -10) / (10 - -10) # this 7 - 7 scale mutes the colors better than -5 to 5, and is more even than the min max scale of -3.9 to 4.9
color <- GrnWhiRedP(normalized)
list(background = color)
}, format = colFormat(digits = 2), name = "Effect on Diversion Rate (in %-points)"),
effectwpht = colDef(style = function(value) {
if (!is.numeric(value)) return()
normalized <- (value - -0.3) / (0.3 - -0.3) # this 7 - 7 scale mutes the colors better than -5 to 5, and is more even than the min max scale of -3.9 to 4.9
color <- GrnWhiRedN(normalized)
list(background = color)
}, format = colFormat(digits = 2), name = "Effect on Waste Per Household (Tons/year)"),
effectwphppd = colDef(style = function(value) {
if (!is.numeric(value)) return()
normalized <- (value - -1.5) / (1.5 - -1.5) # this 7 - 7 scale mutes the colors better than -5 to 5, and is more even than the min max scale of -3.9 to 4.9
color <- GrnWhiRedN(normalized)
list(background = color)
}, format = colFormat(digits = 2), name = "Effect on Waste Per Household (Lbs per Household/day)")),
compact = TRUE, pagination = FALSE, bordered = TRUE)
reactable(regtbl,
columns = list(
baseline = colDef(name = "Baseline Policy"),
change = colDef(name = "Change"),
effectdiv = colDef(name = "Effect on Diversion Rate (in %-Points)"),
effectwpht = colDef(name = "Effect on Diversion Rate (in %-Points)"),
effectwphppd = colDef(name = "Effect on Diversion Rate (in %-Points)")),
compact = TRUE, pagination = FALSE, bordered = TRUE)
#I'll export this table to put it in the report by hitting export on the viewer
## Summary Statistics
# municipalities in each state in the dataset
statefreq <- cbind.data.frame(table(data$State))
total <- sum(statefreq$Freq)
statefreq[5, 2] <- total
statefreq$Var1 <- as.character(statefreq$Var1)
statefreq$Var1[5] <- "Total"
reactable(statefreq,
columns = list(
Var1 = colDef(name = "State"),
Freq = colDef(name = "Frequency")), compact = TRUE, bordered = TRUE, pagination = FALSE)
# For each variable, the number with data
NforVars <- c(sum(table(data$ProvideCompostBins)), sum(table(data$FoodService)), sum(table(data$RecyclingEnforcePersonnel)),
sum(table(data$TrashServiceType)), sum(table(data$RateType)), sum(table(data$ProvRecycleBinorCart)),
sum(table(data$SwapShop)), sum(table(data$EnforceRecycling)), sum(table(data$divrate)), sum(table(datanofl$wasteperhh)))
VarsNames <- c("Provide Compost Bins?", "Provide Food Waste Management?", "Have Recycling Enforecment Personnel?",
"Trash Service type offered?", "Type of Fees?", "Provide Recycle Bins or Carts?",
"Have a swap shop?", "Have a Mandatory Recycling Ordinance?", "Diversion Rate", "Waste per Household")
Varstbl <- cbind.data.frame(VarsNames, NforVars)
reactable(Varstbl,
columns = list(
VarsNames = colDef(name = "Variable/Question"),
NforVars = colDef(name = "Number of Municipalities with Data")), compact = TRUE, bordered = TRUE, pagination = FALSE)
# Descriptive statistics of the important variables
descstats <- c(summary(data$divrate)[1:6], summary(data$PctBachelororMore)[1:6], summary(datanofl$wasteperhh[1:6]),
summary(datanofl$wasteperhhppd[1:6]))
varnames <- c("Diversion Rate", "Educational Attainment", "Waste Per HouseholdT", "Wphaf")
test <- rbind.data.frame(summary(data$divrate))
data$id <- str_c(data$State, "---", data$GovUnit)
datanofl$id <- str_c(datanofl$State, "---", datanofl$GovUnit)
continvars1 <- data[, c(40, 43, 48)]
continvars2 <- datanofl[, c(44, 47, 48)]
continvars <- merge(continvars1, continvars2, by = "id")
stargazer(continvars, type = "text", summary.stat = c("n", "mean", "median", "p25", "p75", "sd", "min", "max"))
stargazer(continvars, type='html', summary.stat = c("mean", "median", "p25", "p75", "sd", "min", "max"),
title='Descriptive Statistics for Significant Dependent & Independent Variables', align = TRUE,
covariate.labels = c("Percent with a Bachelor's Degree or Higher",
"Diversion Rate",
"Waste per Household (Tons/Year)",
"Waste per Household (Lbs/Day)"), digits = 1, out = "descstats.html")
Rates <- cbind.data.frame(table(data$RateType))
Rates[, 1] <- c("Flat Fee Only", "Flat Fee & Usage-Based Fee", "Usage-Based Fee Only")
reactable(Rates,
columns = list(
Var1 = colDef(name = "Fee Type"),
Freq = colDef(name = "Number of Municipalities")), compact = TRUE, bordered = TRUE, pagination = FALSE)
### Appendix --------------------
# All the Following are exported using the Export button on the viewer
par(mfrow = c(2,2))
plot(divfull)
plot(wphfull)
vifdiv <- vif(divfull)
reactable(cbind.data.frame(vifdiv),
columns = list(
vifdiv = colDef(name = "Variance Inflation Factor", format = colFormat(digits = 2))),
compact = TRUE, pagination = FALSE, bordered = TRUE)
# the above applies to both since it is the same variables
# This is simply reported in the text
bptest(divfull) # fails
bptest(wphfull) # passes
# Educational Attainment Graph
educanddiv <- data %>% ggplot(aes(x = PctBachelororMore, y = divrate)) + geom_point(pch = 1, alpha = 0.8) +
ggtitle("Diversion Rate & Educational Attainment") +
xlab("% of Population with a Bachelor's Degree or Higher") + ylab("Diversion Rate") +
geom_vline(xintercept = 26.8, linetype = "dashed") +
geom_vline(xintercept =  64.5, linetype = "dashed") +
scale_y_continuous(labels = function(x) paste0(x, "%")) + scale_x_continuous(labels = function(x) paste0(x, "%")) +
theme_bw() + theme(legend.position = 'none') + gghighlight(divrate > 50) +
annotate(geom = "text",
label = c("Median Educational \n Attainment", "Very High Educational \n Attainment"), x = c(18, 55), y = c(70, 72.5), angle = 30, vjust = 1, size = 3)
educanddiv
#### OOS Waste Data Project
## RI Municipal Data
## Dylan Radley
library(rio)
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(pdftools)
rm(list = ls())
setwd("~/Desktop/Trash Data Project OOS/Data/RI/")
### Trash Numbers --------------------
# Write the function to scan through the table!
scrable <- function(pdf_file,
pageoftable,
first_val,
last_val,
number_columns,
column_names) {
file <- pdf_text(pdf_file)
file <- strsplit(file, "\n")
page <- file[[pageoftable]] # look at a particular page
page <- trimws(page) # get rid of extra spaces
thetable <- page[grep(first_val, page): grep(last_val, page)]
thetable <- str_split_fixed(thetable, " {2,}", number_columns)
dataframe <- data.frame(thetable)
names(dataframe) <- column_names
return(dataframe)
}
# Use it on RI data
RIdta <- scrable("RIMunicipalData.pdf",
1,
"Barrington",
"Woonsocket",
16,
c("Municipality",
"2020 Pop Projection",
"HHServed",
"Solid Waste (Tons)",
"MRF Recycling",
"Composted Material",
"Scrap Metal",
"Clothing",
"Other Recycling",
"Total Waste Generated (Tons)",
"Tons of Trash Landfilled per HH",
"MRF Recycling Rate",
"Mandatory Recycling Rate",
"Overall Diversion Rate",
"Pounds Rejected Recycling per HH Served",
"Rejected Recycling (Tons)"))
# NOTE: There are errors in this table because of the empty spaces. However, it cannot quite be fixed, see the appendix.
# Thus, I will handcode some values to fix a few rows.
RIdta[4, c(8:16)] <- c(0, RIdta[4, 8:15]) # central falls
RIdta[12, c(8:16)] <- c(0, RIdta[12, 8:15]) # Foster
RIdta[15, c(8:16)] <- c(0, RIdta[15, 8:15]) # jamestown
RIdta[16, c(7:16)] <- c(0, 0, RIdta[16, 7:14]) # johnston
RIdta[17, c(7:16)] <- c(0, 0, RIdta[17, 7:14]) # lincoln
RIdta[28, c(7:16)] <- c(0, RIdta[28, 7:15]) # providence
RIdta[30, c(8:16)] <- c(0, RIdta[30, 8:15]) # scituate
RIdta[34, c(8:16)] <- c(0, RIdta[34, 8:15]) # warren
RIdta[35, c(8:16)] <- c(0, RIdta[35, 8:15]) # warwick
# get rid of the commas in the numbers and also make them numbers
RIdta.orig <- RIdta
numbercols <- c(2:16) # the cols that are numbers
RIdta[, numbercols] <- apply(RIdta[, numbercols], 2, function(x) gsub(",", "", x)) # no periods
RIdta[, numbercols] <- apply(RIdta[, numbercols], 2, function(x) gsub("%", "", x)) # no %'s
RIdta[, numbercols] <- apply(RIdta[, numbercols], 2, function(x) as.numeric(as.character(x))) # as numeric
# now to remove the numbers near some of the town names. However, in any analysis you might want to note that info
RIdta$Municipality <- gsub('[[:digit:]]+', '', RIdta$Municipality)
### Policy Data --------------------
policy <- import("RIMunicipalPolicies.xlsx")
policy.orig <- policy
# get a vector of all the col names, which are the second row. Then, make any needed tweaks and make them actual colnames
columns <- policy[2, ]
names(policy) <- columns
policy <- policy[-(1:2),] # get rid of the extra first two rows now
# get rid of the initial extra columns
names(policy)
# note that 89-91 has info on like distributing educational materials
# don't want: 3:9, 12:20, 22:23, 25:33, 35:48, 51:52, 57:68, 70, 73:74, 77:78, 81:82, 83:93, 95:96, 98:101, 106:130, 132:137,
# 139, 141:152, 154:161, 165:167, 170, 172:174, 178:203, 205:221
policy <- policy[, -c(3:9, 12:20, 22:23, 25:33, 35:48, 51:52, 57:68, 70, 73:74, 77:78, 81:82, 83:93, 95:96, 98:101, 106:130,
132:137, 139, 141:152, 154:161, 165:167, 170, 172:174, 178:203, 205:221)]
names(policy)
# now for a second round of like consolidation and so on
# consolidate number households served
names(policy)[5] <- "hhservCurbTrash"
names(policy)[7] <- "hhservCurbRecycling"
names(policy)[18] <- "hhservDropTrash"
names(policy)[120] <- "hhservDropRecycling"
#View(policy[, c(1, 5, 7, 18, 20)])
View(policy)
